name: Build & Deploy to App Runner

on:
  push:
    branches: [ master, main ]
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Show repo layout (sanity check)
        run: |
          pwd
          echo "Branch: $GITHUB_REF_NAME"
          ls -la
          echo "---- backend ----"
          ls -la backend || true
          echo "---- frontend ----"
          ls -la frontend || true
          test -f Dockerfile || (echo "Dockerfile fehlt im Repo-Root!" && exit 1)

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify identity & basic permissions
        run: |
          set -euxo pipefail
          aws sts get-caller-identity
          aws ecr describe-registry

      - id: login-ecr
        name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Ensure ECR repository exists
        run: |
          aws ecr describe-repositories --repository-names "$ECR_REPOSITORY" \
          || aws ecr create-repository --repository-name "$ECR_REPOSITORY"

      - name: Build image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          set -euxo pipefail
          IMAGE="$REGISTRY/$ECR_REPOSITORY"
          TAG="${GITHUB_SHA::7}"
          echo "Building $IMAGE:$TAG"
          docker build --progress=plain -t "$IMAGE:$TAG" -t "$IMAGE:latest" .

      - name: Push image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          set -euxo pipefail
          IMAGE="$REGISTRY/$ECR_REPOSITORY"
          TAG="${GITHUB_SHA::7}"
          docker push "$IMAGE:$TAG"
          docker push "$IMAGE:latest"

      - name: Update App Runner to new image
        env:
          SERVICE_ARN: ${{ secrets.APP_RUNNER_SERVICE_ARN }}
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          set -euxo pipefail
          TAG="${GITHUB_SHA::7}"
          IMAGE_URI="$REGISTRY/$ECR_REPOSITORY:$TAG"
          echo "Updating $SERVICE_ARN to $IMAGE_URI"
          aws apprunner update-service \
            --service-arn "$SERVICE_ARN" \
            --source-configuration ImageRepository="{ImageIdentifier=\"$IMAGE_URI\",ImageRepositoryType=\"ECR\",ImageConfiguration={Port=\"8080\"}}"
